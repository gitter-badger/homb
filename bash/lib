#!/bin/bash
################################################################################
# Bash Library
#
# This file contains the library of functions that are called by homb's other
# files.
#
################################################################################

################################################################################
#
# bash_happy
#
# Checks to see that we are indeed running teh bash.
#
################################################################################
bash_happy() {

  local which=$(which bash > /dev/null)
  local alias=$(alias bash &> /dev/null)  

  if [ "${SHELL}" == "$(which bash)" ]; then

    $which || $alias || return 1
    return 0

  else

    return 1

  fi

}


################################################################################
#
# test_symlink(FILENAME [TARGET])
#
# Checks for the symbolic link FILENAME to see if it is valid or not. If there 
# is a TARGET path string passed then testlink will test to see if the link is a
# link and if it links to the TARGET path.
#
################################################################################
test_symlink() {

  local link=$1
  local target=$2

  if [ "$target" != "" ]; then
  
    if [ "$(readlink $link)" != "$target" ]; then 

      echo "$link -/-> $target"
      return 1

    else

      echo "$link ---> $target"

    fi

  fi

  if [  -L "$link" ]; then

    if [ -e "$link" ]; then 
 
      echo "$link is good."
      return 0

    else

      echo "$link is a dead link."
      return 1

    fi

  else

    echo "$link is not a link."
    return 1

  fi

}


################################################################################
# 
# include
#
# A quick way to include files for the homb project.
#
################################################################################
include() {

  if [ -f "${HOMBASE}/${1}" ];  then

    source "${HOMBASE}/${1}"

  else

    if [ -f "${HOMBASE}/${1}/rc" ]; then
      
      # DANGER! We don't include tmux rc because it causes major problems.
      # There is no issue if we don't include it so exit gracefully.
      # See https://github.com/threeiem/homb/issues/2
      if [ "${1}" == "tmux" ]; then
       
        return 0 

      else

        # Load the libraries needed for the resource file.
        if [[ ${1} != *"/"* ]]; then

          export ${1^^}LIB="${HOMBASE}/${1}/lib" && test -f ${1^^}LIB && source "${1^^}LIB"

        fi

        source "${HOMBASE}/${1}/rc"

      fi

    else

      return 1 #fail

    fi
  fi
}


################################################################################
# 
# gitPS1
#
# We are going to use this over __get_ps1() because we want to trap errors and 
# customize the output.
#
# TODO Colors for Symbology on interactive scripts when possible.
#
################################################################################
gitPS1() {

  local git_ps1="$(__git_ps1 2> /dev/null)"

  if [ "${git_ps1}" != "" ]; then 
  
    echo -en "$(__git_ps1 "(%s)")"
    return 0

  else

    # FAILBOAT
    return 1

  fi

}


################################################################################
#
# interactive
#
# Check to see if the shell is interactive or not.  Returns a 1 if the shell is
# not a login/interactive shell.
#
################################################################################
interactive() {

  if [ "${PS1}" ]; then

    echo "Interactive"
    return 0

  else

    return 1

  fi

#  case $TERM in
#  
#    ansi*|screen*|linux*|xterm*|putty-*)
#  
#      ;;
#  
#    *)
#      ;;
#  
#  esac
#

}

# vim: ft=sh
