#!/bin/bash
################################################################################
# Bash Library
#
# This file contains the library of functions that are called by homb's other
# files.
#
# vim: ft=sh
#
################################################################################

################################################################################
#
# bash_happy
#
# Checks to see that we are indeed running teh bash.
#
################################################################################
function bash_happy() {

  local which=$(which bash > /dev/null)
  local alias=$(alias bash &> /dev/null)  

  if [ "${SHELL}" == "$(which bash)" ]; then

    $which || $alias || return 1
    return 0

  else

    return 1

  fi

}


################################################################################
#
# test_socket_link
#
# Checks for the ssh_auth_sock link to see if it is valid or not.
#
################################################################################
function test_socket_link(){

  local broken=$(find "$1" -type l -print0 2> /dev/null| \
    xargs -r0 file| \
    grep "broken symbolic"| \
    sed -e 's/^\|: *broken symbolic.*$/"/g')

  if [ $? -ne 0 ]; then

    #echo "WARNING: Issue with SSH_AUTH_SOCK link."
    return 1

  else

    return 0

  fi

}


################################################################################
# 
# include
#
# A quick way to include files for the homb project.
#
################################################################################
include(){

  if [ -f "${HOMBASE}/${1}" ];  then

    source "${HOMBASE}/${1}"

  else

    if [ -f "${HOMBASE}/${1}/rc" ]; then
      
      # DANGER! We don't include tmux rc because it causes major problems.
      # There is no issue if we don't include it so exit gracefully.
      if [ "${1}" == "tmux" ]; then
       
        return 0 

      else

        source "${HOMBASE}/${1}/rc"


      fi

    else

      return 1 #fail

    fi
  fi
}


################################################################################
# 
# gitPS1
#
# We are going to use this over __get_ps1() because we want to trap errors and 
# customize the output.
#
# TODO: Symbology for colors on interactive scripts when possible.
#
################################################################################
function gitPS1(){

  local git_ps1="$(__git_ps1 2> /dev/null)"

  if [ "${git_ps1}" ]; then 
  
    echo -en "$(__git_ps1 "(%s)")"
    return 0

  else

    # FAILBOAT
    return 1

  fi

}

################################################################################
#
# interactive
#
# Check to see if the shell is interactive or not.  Returns a 1 if the shell is
# not a login/interactive shell.
#
################################################################################
function interactive(){

  if [ "${PS1}" ]; then

    echo "interactive"
    return 0

  else

    return 1

  fi

#  case $TERM in
#  
#    ansi*|screen*|linux*|xterm*|putty-*)
#  
#      ;;
#  
#    *)
#      ;;
#  
#  esac
#

}
